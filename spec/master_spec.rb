require "spec_helper"

describe "salt::master" do
  before { @chef_run = ::ChefSpec::ChefRunner.new.converge "salt::master" }

  it "configures apt" do
    ::Chef::Recipe.any_instance.should_receive(:include_recipe).with "salt::apt"
    chef_run = ::ChefSpec::ChefRunner.new.converge "salt::master"
  end

  it "installs package" do
    @chef_run.should install_package "salt-master"
  end

  it "starts service" do
    @chef_run.should start_service "salt-master"
  end

  it "enables service" do
    @chef_run.should set_service_to_start_on_boot "salt-master"
  end

  describe "master conf" do
    before do
      @file = "/etc/salt/master"
      @yaml = load_yaml_for @chef_run.template(@file), @chef_run.node
    end

    it "has proper owner" do
      @chef_run.template(@file).should be_owned_by("root", "root")
    end

    it "has proper modes" do
      m = @chef_run.template(@file).mode

      sprintf("%o", m).should == "644"
    end

    it "has custom banner" do
      @chef_run.should create_file_with_content @file, <<-EOF
# This file autogenerated by Chef 
# Do not edit, changes will be overwritten.
      EOF
    end

    it "has default include" do
      @yaml['default_include'].should == "master.d/*.conf"
    end

    it "has interface" do
      @yaml['interface'].should == "0.0.0.0"
    end

    it "has publish port" do
      @yaml['publish_port'].should == 4505
    end

    it "has user" do
      @yaml['user'].should == "root"
    end

    it "has max open files" do
      @yaml['max_open_files'].should == 100000
    end

    it "has worker threads" do
      @yaml['worker_threads'].should == 5
    end

    it "has ret port" do
      @yaml['ret_port'].should == 4506
    end

    it "has pidfile" do
      @yaml['pidfile'].should == "/var/run/salt-master.pid"
    end

    it "has root dir" do
      @yaml['root_dir'].should == "/"
    end

    it "has pki dir" do
      @yaml['pki_dir'].should == "/etc/salt/pki/master"
    end

    it "has cachedir" do
      @yaml['cachedir'].should == "/var/cache/salt/master"
    end

    it "has verify env" do
      @yaml['verify_env'].should be
    end

    it "has keep jobs" do
      @yaml['keep_jobs'].should == 24
    end

    it "has timeout" do
      @yaml['timeout'].should == 5
    end

    it "has sock dir" do
      @yaml['sock_dir'].should == "/var/run/salt/master"
    end

    it "has job cache" do
      @yaml['job_cache'].should be
    end

    it "has minion data cache" do
      @yaml['minion_data_cache'].should be
    end

    it "has include" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['include'] = [
          "/foo"
        ]
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['include'].should == ["/foo"]
    end

    it "doesn't have include" do
      @yaml['include'].should be_nil
    end

    it "has open mode" do
      @yaml['open_mode'].should be_false
    end

    it "has auto accept" do
      @yaml['auto_accept'].should be_false
    end

    it "has autosign file" do
      @yaml['autosign_file'].should == "/etc/salt/autosign.conf"
    end

    it "has permissive pki access" do
      @yaml['permissive_pki_access'].should be_false
    end

    it "has runner dirs" do
      @yaml['runner_dirs'].should be_empty
    end

    it "has cython enable" do
      @yaml['cython_enable'].should be_false
    end

    it "has state top" do
      @yaml['state_top'].should == "top.sls"
    end

    it "has master tops" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['master_tops'] = {
          "foo" => "bar"
        }
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['master_tops'].should == { "foo" => "bar" }
    end

    it "doesn't have master_tops" do
      @yaml['master_tops'].should be_nil
    end

    it "has external nodes" do
      @yaml['external_nodes'].should == "None"
    end

    it "has renderer" do
      @yaml['renderer'].should == "yaml_jinja"
    end

    it "has failhard" do
      @yaml['failhard'].should be_false
    end

    it "has state verbose" do
      @yaml['state_verbose'].should be
    end

    it "has state output" do
      @yaml['state_output'].should == "full"
    end

    it "has file roots" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['file_roots'] = {
          "base" => [
            "/foo",
            "/bar"
          ]
        }
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['file_roots'].should == { "base" => ["/foo", "/bar"] }
    end

    it "doesn't have file roots" do
      @yaml['file_roots'].should be_nil
    end

    it "has hash type" do
      @yaml['hash_type'].should == "md5"
    end

    it "has file buffer size" do
      @yaml['file_buffer_size'].should == 1048576
    end

    it "has file ignore regex" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['file_ignore_regex'] = [
          "/\.foo/",
          "/\.bar/"
        ]
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['file_ignore_regex'].should == ["/\.foo/", "/\.bar/"]
    end

    it "doesn't have file ignore regex" do
      @yaml['file_ignore_regex'].should be_nil
    end

    it "has file ignore glob" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['file_ignore_glob'] = [
          "*.foo",
          "*.bar"
        ]
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['file_ignore_glob'].should == ["*.foo", "*.bar"]
    end

    it "doesn't have file ignore glob" do
      @yaml['file_ignore_glob'].should be_nil
    end

    it "has pillar roots" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['pillar_roots'] = {
          "base" => [
            "/foo"
          ]
        }
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['pillar_roots'].should == { "base" => ["/foo"] }
    end

    it "doesn't have pillar roots" do
      @yaml['pillar_roots'].should be_nil
    end

    it "pillar opts" do
      @yaml['pillar_opts'].should be
    end

    it "order masters" do
      @yaml['order_masters'].should be_false
    end

    it "has syncdir masters" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['syndic_master'] = "masterofmasters"
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['syndic_master'].should == "masterofmasters"
    end

    it "doesn't have syncdir masters" do
      @yaml['syndic_master'].should be_nil
    end

    it "has peer" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['peer'] = {
          ".*" => [
            ".*"
          ]
        }
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['peer'].should == { ".*" => [".*"] }
    end

    it "doesn't have peer" do
      @yaml['peer'].should be_nil
    end

    it "has peer run" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['peer_run'] = {
          "foo.example.com" => [
            "bar.baz"
          ]
        }
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['peer_run'].should == { "foo.example.com" => ["bar.baz"] }
    end

    it "doesn't have peer run" do
      @yaml['peer_run'].should be_nil
    end

    it "has log file" do
      @yaml['log_file'].should == "/var/log/salt/master"
    end

    it "has key logfile" do
      @yaml['key_logfile'].should == "/var/log/salt/key"
    end

    it "has log level" do
      @yaml['log_level'].should == "warning"
    end

    it "has log level logfile" do
      @yaml['log_level_logfile'].should == "warning"
    end

    it "has log datefmt" do
      @yaml['log_datefmt'].should == '%Y-%m-%d %H:%M:%S'
    end

    it "has log fmt console" do
      @yaml['log_fmt_console'].should == '[%(levelname)-8s] %(message)s'
    end

    it "has log fmt logfile" do
      @yaml['log_fmt_logfile'].should == '%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'
    end

    it "has log granular levels" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['log_granular_levels'] =  '{ "salt": "warning", "salt.modules": "debug"}'
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['log_granular_levels'].should == { "salt" => "warning", "salt.modules" => "debug" }
    end

    it "doesn't have log granular levels" do
      @yaml['log_granular_levels'].should be_nil
    end

    it "has node groups" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['master'] = {}
        n.set['salt']['master']['nodegroups'] = {
          "group1" => "foo.example.com,bar.example.com",
          "group2" => "baz.example.com,qux.example.com"
        }
      end.converge "salt::master"
      yaml = load_yaml_for chef_run.template(@file), chef_run.node

      yaml['nodegroups'].should == {
        "group1" => "foo.example.com,bar.example.com",
        "group2" => "baz.example.com,qux.example.com"
      }
    end

    it "doesn't have node groups" do
      @yaml['nodegroups'].should be_nil
    end

    it "has range_server" do
      @yaml['range_server'].should == "range:80"
    end

    it "restarts salt-master" do
      resource = ["salt-master", "service", "delayed"]

      @chef_run.template(@file).notifies(*resource).should be
    end
  end
end
