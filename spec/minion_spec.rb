require "chefspec"
require "spec_helper"

describe "salt::minion" do
  before { @chef_run = ::ChefSpec::ChefRunner.new.converge "salt::minion" }

  it "configures apt" do
    ::Chef::Recipe.any_instance.should_receive(:include_recipe).with "salt::apt"
    chef_run = ::ChefSpec::ChefRunner.new.converge "salt::minion"
  end

  it "installs package" do
    @chef_run.should install_package "salt-minion"
  end

  it "starts service" do
    @chef_run.should start_service "salt-minion"
  end

  it "enables service" do
    @chef_run.should set_service_to_start_on_boot "salt-minion"
  end

  describe "minion conf" do
    before { @file = "/etc/salt/minion" }

    it "has proper owner" do
      @chef_run.template(@file).should be_owned_by("root", "root")
    end

    it "has proper modes" do
      m = @chef_run.template(@file).mode

      sprintf("%o", m).should == "644"
    end

    it "has custom banner" do
      @chef_run.should create_file_with_content @file, <<-EOF
# This file autogenerated by Chef 
# Do not edit, changes will be overwritten.
      EOF
    end

    it "has master" do
      @chef_run.should create_file_with_content @file,
        "master: salt"
    end

    it "has master port" do
      @chef_run.should create_file_with_content @file,
        "master_port: 4506"
    end

    it "has user" do
      @chef_run.should create_file_with_content @file,
        "user: root"
    end

    it "has root dir" do
      @chef_run.should create_file_with_content @file,
        "root_dir: /"
    end

    it "has pki dir" do
      @chef_run.should create_file_with_content @file,
        "pki_dir: /etc/salt/pki"
    end

    it "has id" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['id'] = "foo-id"
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        "id: foo-id"
    end

    it "doesn't have id" do
      @chef_run.should_not create_file_with_content @file,
        "id: "
    end

    it "has append domain" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['append_domain'] = "foo-domain"
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        "append_domain: foo-domain"
    end

    it "doesn't have append domain" do
      @chef_run.should_not create_file_with_content @file,
        "append_domain: "
    end

    it "has sub timeout" do
      @chef_run.should create_file_with_content @file,
        "sub_timeout: 60"
    end

    it "has cachedir" do
      @chef_run.should create_file_with_content @file,
        "cachedir: /var/cache/salt"
    end

    it "has cache jobs" do
      @chef_run.should create_file_with_content @file,
        "cache_jobs: False"
    end

    it "has acceptance wait time" do
      @chef_run.should create_file_with_content @file,
        "acceptance_wait_time: 10"
    end

    it "has dns check" do
      @chef_run.should create_file_with_content @file,
        "dns_check: True"
    end

    it "has disable modules" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['disable_modules'] =  "[cmd,test]"
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        "disable_modules: [cmd,test]"
    end

    it "doesn't have disable modules" do
      @chef_run.should_not create_file_with_content @file,
        "disable_modules: "
    end

    it "has disable returners" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['disable_returners'] =  "[]"
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        "disable_returners: []"
    end

    it "doesn't have disable returners" do
      @chef_run.should_not create_file_with_content @file,
        "disable_returners: "
    end

    it "has module dirs" do
      @chef_run.should create_file_with_content @file,
        "module_dirs: []"
    end

    it "has returner dirs" do
      @chef_run.should create_file_with_content @file,
        "returner_dirs: []"
    end

    it "has states dirs" do
      @chef_run.should create_file_with_content @file,
        "states_dirs: []"
    end

    it "has render dirs" do
      @chef_run.should create_file_with_content @file,
        "render_dirs: []"
    end

    it "has providers" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['providers'] = {
          "foo" => "bar",
          "baz" => "qux"
        }
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        %r{^providers:\n  foo: bar\n  baz: qux\n}m
    end

    it "doesn't have providers" do
      @chef_run.should_not create_file_with_content @file,
        %r{^providers:}
    end

    it "has cython enable" do
      @chef_run.should create_file_with_content @file,
        "cython_enable: False"
    end

    it "has renderer" do
      @chef_run.should create_file_with_content @file,
        "renderer: yaml_jinja"
    end

    it "has state verbose" do
      @chef_run.should create_file_with_content @file,
        "state_verbose: False"
    end

    it "has autoload dynamic modules" do
      @chef_run.should create_file_with_content @file,
        "autoload_dynamic_modules: True"
    end

    it "has clean dynamic modules" do
      @chef_run.should create_file_with_content @file,
        "clean_dynamic_modules: True"
    end

    it "has environment" do
      @chef_run.should create_file_with_content @file,
        "environment: None"
    end

    it "has state top" do
      @chef_run.should create_file_with_content @file,
        "state_top: top.sls"
    end

    it "has file roots" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['file_roots'] = {
          "base" => [
            "/foo",
            "/bar"
          ]
        }
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        %r{^file_roots:\n  base:\n  - /foo\n  - /bar\n}m
    end

    it "doesn't have file roots" do
      @chef_run.should_not create_file_with_content @file,
        %r{^file_roots:}
    end

    it "has hash type" do
      @chef_run.should create_file_with_content @file,
        "hash_type: md5"
    end

    it "has pillar roots" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['pillar_roots'] = {
          "base" => [
            "/foo"
          ]
        }
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        %r{^pillar_roots:\n  base:\n  - /foo\n}m
    end

    it "doesn't have pillar roots" do
      @chef_run.should_not create_file_with_content @file,
        %r{^pillar_roots:}
    end

    it "has open mode" do
      @chef_run.should create_file_with_content @file,
        "open_mode: False"
    end

    it "has multiprocessing" do
      @chef_run.should create_file_with_content @file,
        "multiprocessing: True"
    end

    it "has log file" do
      @chef_run.should create_file_with_content @file,
        "log_file: /var/log/salt/minion"
    end

    it "has log level" do
      @chef_run.should create_file_with_content @file,
        "log_level: warning"
    end

    it "has log granular levels" do
      chef_run = ::ChefSpec::ChefRunner.new do |n|
        n.set['salt'] = {}
        n.set['salt']['minion'] = {}
        n.set['salt']['minion']['log_granular_levels'] =  '{ "salt": "warning", "salt.modules": "debug"}'
      end.converge "salt::minion"

      chef_run.should create_file_with_content @file,
        'log_granular_levels: { "salt": "warning", "salt.modules": "debug"}'
    end

    it "doesn't have log granular levels" do
      @chef_run.should_not create_file_with_content @file,
        %r{^log_granular_levels:}
    end

    it "restarts conserver-server" do
      resource = [ "salt-minion", "service", "delayed" ]

      @chef_run.template(@file).notifies(*resource).should be_true
    end
  end
end
